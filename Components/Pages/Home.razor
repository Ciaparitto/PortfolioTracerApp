@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models
@using PortfolioApp.Services.Interfaces
@inject IApiService _ApiService;
@inject IUserService _UserService;
@inject HttpClient httpclinet;
@attribute [Authorize]


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script src="js/HomeScript.js"</script>
<canvas id="myChart" style="width:100%;max-width:700px"></canvas>
<PageTitle>Home</PageTitle>

	sprawdz cene <InputSelect @bind-Value="model.TypeOfAsset" @oninput="UpdateSelectedType">
	<option value="All">Wszytsko </option>
	<option value="Metal">Metal</option>
	<option value="Currency">Currency</option>
	<option value="CryptoCurrency">CryptoCurrency</option>
</InputSelect>
@if (LoggedUser != null)
{
	<h1>Hello @LoggedUser.UserName</h1>
}

<button id="dayButton" onclick='GetData(7,"@selectedType")'>Week</button>
<button id="monthButton" onclick='GetData(30,"@selectedType")'>Month</button>
<button id="monthButton" onclick='GetData(365,"@selectedType")'>Year</button>
<p id="AssetValueChange"></p>

@if(UserAssetList != null)
{
	foreach(var Asset in UserAssetList)
	{
		<p>posiadasz @Dict[Asset.Key] w ilosci @Asset.Value</p>
	}
}
	


@code{
	public string PickedType;
	public Dictionary<string, double> UserAssetList;
	public AssetModel model = new AssetModel();
	public string selectedType = string.Empty;
	public double MetalPrice;
	public double AmonutOfEUR = 20;
	public double AmmountOfPLN = 30;
	public string CurrencyWorth;
	public UserModel LoggedUser;

	public Dictionary<string, string> MetalDict;
	public Dictionary<string, string> CurrencyDict;
	public Dictionary<string, string> CryptoCurrencyDict;
	public Dictionary<string, string> Dict;
	public Dictionary<string, string> AllAssetsDict;

	protected override async Task OnInitializedAsync()
	{
		LoggedUser = await _UserService.GetLoggedUser();

		MetalDict = await _ApiService.GetMetalDict();

		CurrencyDict = await _ApiService.GetCurrencyDict();

		CryptoCurrencyDict = await _ApiService.GetCryptoCurrencyDict();


		AllAssetsDict = CurrencyDict
			.Concat(MetalDict)
			.Concat(CryptoCurrencyDict)
			.ToDictionary(pair => pair.Key, pair => pair.Value);
		Dict = AllAssetsDict;

		UserAssetList = await _UserService.GetUserAssets();


	}

	private async Task UpdateSelectedType(ChangeEventArgs Event)
	{
		selectedType = Event.Value?.ToString();
		if (selectedType == "Currency")
		{
			Dict = CurrencyDict;
			UserAssetList = await _UserService.GetUserAssetsByType("Currency");
			PickedType = "Currency";
		}
		else if (selectedType == "Metal")
		{
			Dict = MetalDict;
			UserAssetList = await _UserService.GetUserAssetsByType("Metal");
			PickedType = "Metal";
		}
		else if (selectedType == "CryptoCurrency")
		{
			Dict = CryptoCurrencyDict;
			UserAssetList = await _UserService.GetUserAssetsByType("CryptoCurrency");
			PickedType = "CryptoCurrency";

		}
		else
		{
			Dict = AllAssetsDict;
		}
	}
	
	
	
}