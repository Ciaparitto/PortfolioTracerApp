@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models
@using PortfolioApp.Services.Interfaces
@inject IApiService ApiService;
@inject IUserService UserService;
@inject HttpClient httpclinet;
@attribute [Authorize]


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script src="js/HomeScript.js"</script>
<canvas id="myChart" style="width:100%;max-width:700px"></canvas>
<PageTitle>Home</PageTitle>

	sprawdz cene <InputSelect @bind-Value="model.TypeOfAsset" @oninput="UpdateSelectedType">
	<option value="All">Wszytsko </option>
	<option value="Metal">Metal</option>
	<option value="Currency">Currency</option>
	<option value="CryptoCurrency">CryptoCurrency</option>
</InputSelect>
@if (LoggedUser != null)
{
	<h1>Hello @LoggedUser.UserName</h1>
}
<p id="price">test @test</p>
<button id="dayButton" onclick='changeprice("XAU", 2023, 12, 15,2023, 12, 14)'>Day</button>
<button id="monthButton" onclick='changeprice("XAU", 2023, 12, 15,2023, 11, 15)'>Month</button>
<button id="monthButton" onclick='changeprice("XAU", 2023, 12, 15,2022, 12, 15)'>Year</button>
	<button @onclick="@(() =>  testvoid())">klinij</button>


@code{
	public AssetModel model = new AssetModel();
	public string selectedType = string.Empty;
	public double MetalPrice;
	public double AmonutOfEUR = 20;
	public double AmmountOfPLN = 30;
	private string test = "22";
	public string CurrencyWorth;
	public UserModel LoggedUser;

	protected override async Task OnInitializedAsync()
	{
		LoggedUser = await UserService.GetLoggedUser();

	}
	async private Task testvoid()
	{
		await JSRuntime.InvokeVoidAsync("test","dziala");
		Console.WriteLine("po wyslaniu");
	}
	private void UpdateSelectedType(ChangeEventArgs Event)
	{

	}
	[JSInvokable]
	public async Task UpdatePrice(string metalPrice)
	{
		test = metalPrice;
		await InvokeAsync(() => StateHasChanged());
	}

	
	
}