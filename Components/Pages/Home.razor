@page "/"
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models
@using PortfolioApp.Services.Interfaces
@inject IApiService ApiService;
@inject IUserService UserService;
@inject HttpClient httpclinet;
<PageTitle>Home</PageTitle>
@if (LoggedUser != null)
{
	<h1>Hello @LoggedUser.UserName</h1>
}
<p>test @test</p>

<p>@MetalPrice</p>
<button @onclick="GetCurrencyPrice">pobierz dane waluty</button>
<p>@CurrencyWorth</p>

@code{
	public double MetalPrice;
	public double AmonutOfEUR = 20;
	public double AmmountOfPLN = 30;
	public string test;
	public string CurrencyWorth;
	public UserModel LoggedUser;
	protected override async Task OnInitializedAsync()
	{
		LoggedUser = await UserService.GetLoggedUser();
		test = await GetMetalPriceMonth(2023, 12, 13, "XAU");


	}
	public async Task<string> GetMetalPriceDay(int year, int month, int day,string symbol)
	{
		var metalprice1 = await ApiService.GetMetalPrice("XAU", "USD", year.ToString(), month.ToString(), day.ToString());
		var metalprice2 = await ApiService.GetMetalPrice("XAU", "USD", year.ToString(), month.ToString(), (day - 1).ToString());
		return $"zamina w kursie zlota to {metalprice1.Rates[symbol] - metalprice2.Rates[symbol]}";
	}
	public async Task<string> GetMetalPriceMonth(int year, int month, int day, string symbol)
	{
		var ammount = UserService.GetAmmountOfAsset("XAU", "Metal").Result;
		var metalprice1 = await ApiService.Convert("USD", "XAU", ammount, year.ToString(), month.ToString(), day.ToString());
		var metalprice2 = await ApiService.Convert("USD", "XAU", ammount, year.ToString(), (month - 1).ToString(), day.ToString());
		var change = Math.Round(metalprice1.Result - metalprice2.Result,2);
		if(change > 0)
		{
			return $"twoje zloto usroslo o {change} USD";
		}
		if (change < 0)
		{
			return $"twoje zloto spadlo o {change} USD";
		}
		if(change == 0)
		{
			return $"twoje zloto jest warte {change} USD";
		}
		return "error";
	}
	public async Task<double> GetMetalPriceYear(int year, int month, int day,string symbol)
	{
		var metalprice1 = await ApiService.GetMetalPrice("XAU", "USD", year.ToString(), month.ToString(), day.ToString());
		var metalprice2 = await ApiService.GetMetalPrice("XAU", "USD", (year-1).ToString(), month.ToString(), day.ToString());
		return Convert.ToDouble(metalprice1.Rates[symbol] - metalprice2.Rates[symbol]);
	}
	public async Task GetCurrencyPrice()
	{
		var resultCurrencyYesterDay = await ApiService.GetCurrencyPrice("USD", "EUR,PLN,CAD", "2023", "12", "09");
		var resultCurrency = await ApiService.GetCurrencyPrice("USD", "EUR,PLN,CAD", "2023", "12", "10");

		var WorthPLN = AmmountOfPLN * Convert.ToDouble(resultCurrency.Rates["PLN"]);
		var WorthEUR = AmonutOfEUR * Convert.ToDouble(resultCurrency.Rates["EUR"]); 

		var WorthPLNY = AmmountOfPLN * Convert.ToDouble(resultCurrencyYesterDay.Rates["PLN"]);
		var WorthEURY = AmonutOfEUR * Convert.ToDouble(resultCurrencyYesterDay.Rates["EUR"]);


		CurrencyWorth = $"Wartosc Twoich EURO to {Math.Round(WorthEUR,2)} USD to o {Math.Round(WorthEUR - WorthEURY, 2)} USD wiecej niz wczoraj \n				Wartosc	Twoich PLN to {Math.Round(WorthPLN, 2)} USD to o {Math.Round(WorthPLN - WorthPLNY, 2)} USD wiecej niz wczoraj";

	}
	
}