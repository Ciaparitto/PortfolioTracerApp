@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models
@using PortfolioApp.Services.Interfaces
@inject IDbService _DbService;
@inject IUserService _UserService;
@inject HttpClient httpclinet;
@inject IAssetGetter _AssetGetter;
@inject IUserGetter _UserGetter;

@attribute [Authorize]
<PageTitle>Home</PageTitle>
<HeadContent>
	<link href="/css/AddHomeStyle.css" rel="stylesheet" />
</HeadContent>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script src="js/HomeScript.js"></script>
<div id="Chart-container">
	<div id="LoadingMessage"></div>
	<canvas id="Chart" ></canvas>
</div>

<div id="buttons">
	
		
	<InputSelect  id="Home-Select" @bind-Value="model.TypeOfAsset" @oninput="UpdateSelectedType">
		<option value="All">All</option>
		<option value="Metal">Metal</option>
		<option value="Currency">Currency</option>
		<option value="CryptoCurrency">CryptoCurrency</option>
	</InputSelect>
	

	<button id="weekButton" class="Home-Buttons" onclick='GetData(7,"@selectedType")'>Week</button>
	<button id="monthButton" class="Home-Buttons" onclick='GetData(30,"@selectedType")'>Month</button>
	<button id="yearButton" class="Home-Buttons" onclick='GetData(365,"@selectedType")'>Year</button>
	</div>
<p id="AssetValueChange"></p>


<script>
	//document.getElementById("weekButton").click();
</script>
@code{
	public string PickedType;
	public AssetModel model = new AssetModel();
	public string selectedType = string.Empty;
	public double MetalPrice;
	public double AmonutOfEUR = 20;
	public double AmmountOfPLN = 30;
	public string CurrencyWorth;
	public UserModel LoggedUser;

	public Dictionary<string, string> MetalDict;
	public Dictionary<string, string> CurrencyDict;
	public Dictionary<string, string> CryptoCurrencyDict;
	public Dictionary<string, string> Dict;
	private Dictionary<string, string> AllAssetsDict;
	protected override async Task OnInitializedAsync()
	{

		LoggedUser = await _UserGetter.GetLoggedUser();
		var nwm = await _AssetGetter.GetAssetsValue("XAU",1,LoggedUser);
		MetalDict = await _DbService.GetMetalDict();

		CurrencyDict = await _DbService.GetCurrencyDict();

		CryptoCurrencyDict = await _DbService.GetCryptoCurrencyDict();


		AllAssetsDict = CurrencyDict
			.Concat(MetalDict)
			.Concat(CryptoCurrencyDict)
			.ToDictionary(pair => pair.Key, pair => pair.Value);
		Dict = AllAssetsDict;
	}

	private async Task UpdateSelectedType(ChangeEventArgs Event)
	{
		selectedType = Event.Value?.ToString();
		if (selectedType == "Currency")
		{
			Dict = CurrencyDict;
			PickedType = "Currency";
		}
		else if (selectedType == "Metal")
		{
			Dict = MetalDict;
			PickedType = "Metal";
		}
		else if (selectedType == "CryptoCurrency")
		{
			Dict = CryptoCurrencyDict;
			PickedType = "CryptoCurrency";
		}
		else if (selectedType == "All")
		{
			Dict = AllAssetsDict;
			PickedType = "All";
		}
	}	
}