@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models
@using PortfolioApp.Services.Interfaces
@inject IApiService ApiService;
@inject IUserService UserService;
@inject HttpClient httpclinet;



<PageTitle>Home</PageTitle>
<body>
	sprawdz cene <InputSelect @bind-Value="model.TypeOfAsset" @oninput="UpdateSelectedType">
	<option value="All">Wszytsko </option>
	<option value="Metal">Metal</option>
	<option value="Currency">Currency</option>
	<option value="CryptoCurrency">CryptoCurrency</option>
</InputSelect>
@if (LoggedUser != null)
{
	<h1>Hello @LoggedUser.UserName</h1>
}
<p id="price">test @test</p>
<button id="dayButton" onclick='changeprice("XAU", 2023, 12, 15,2023, 12, 14)'>Day</button>
<button id="monthButton" onclick='changeprice("XAU", 2023, 12, 15,2023, 11, 15)'>Month</button>
<button id="monthButton" onclick='changeprice("XAU", 2023, 12, 15,2022, 12, 15)'>Year</button>
	<button @onclick="testvoid">klinij</button>
</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script src="~/HomeScript.js"></script>



@code{
	public AssetModel model = new AssetModel();
	public string selectedType = string.Empty;
	public double MetalPrice;
	public double AmonutOfEUR = 20;
	public double AmmountOfPLN = 30;
	private string test = "22";
	public string CurrencyWorth;
	public UserModel LoggedUser;
	public ConvertModel wnm;
	protected override async Task OnInitializedAsync()
	{
		LoggedUser = await UserService.GetLoggedUser();

	}
	async private Task testvoid()
	{
		await JSRuntime.InvokeVoidAsync("test");
		Console.WriteLine("po wyslaniu");
	}
	private void UpdateSelectedType(ChangeEventArgs Event)
	{
	
	}
	[JSInvokable]
	public async Task UpdatePrice(string metalPrice)
	{
		
		test = metalPrice;
		await InvokeAsync(() => StateHasChanged());
	}
	public async Task<string> GetMetalPriceDay(int year, int month, int day,string symbol)
	{
		var metalprice1 = await ApiService.GetMetalPrice("XAU", "USD", year.ToString(), month.ToString(), day.ToString());
		var metalprice2 = await ApiService.GetMetalPrice("XAU", "USD", year.ToString(), month.ToString(), (day - 1).ToString());
		return $"zamina w kursie zlota to {metalprice1.Rates[symbol] - metalprice2.Rates[symbol]}";
	}
	public async Task<string> GetMetalPrice(string symbol,string typeofmetal, int year, int month, int day, int year2, int month2, int day2)
	{
		var ammount = UserService.GetAmmountOfAsset(symbol, typeofmetal).Result;
		var metalprice1 = await ApiService.Convert("USD", symbol, ammount, year.ToString(), month.ToString(), day.ToString());
		var metalprice2 = await ApiService.Convert("USD", symbol, ammount, year2.ToString(), month2.ToString(), day2.ToString());
		var change = Math.Round(metalprice1.Result - metalprice2.Result,2);
		if(change > 0)
		{
			return $"twoje zloto usroslo o {change} USD";
		}
		if (change < 0)
		{
			return $"twoje zloto spadlo o {change} USD";
		}
		if(change == 0)
		{
			return $"twoje zloto jest warte {change} USD";
		}
		return "error";
	}
	
	
}