@page "/YourTransactions"
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models
@using PortfolioApp.Services.Interfaces
@rendermode InteractiveServer
@inject IDictGetter _DictGetter;
@inject IDbHelper _DbHelper;
@inject IUserService _UserService;
@inject IAssetGetter _AssetGetter
@inject IUserGetter _UserGetter;
@inject ITransactionGetter _TransactionGetter;
<PageTitle>Your Transactions History</PageTitle>
<HeadContent>
	<link href="/css/YourTransactions.css" rel="stylesheet" />
</HeadContent> 
<div id="AddingTransaction">
	 
	<EditForm Model="@Model" OnSubmit="@AddTransactionfunc">
		<p>
			What do you want
			<InputSelect @bind-Value="Model.TransactionType">
				<option class="option" value="Deposit">Deposit</option>
				<option class="option" value="Withdraw">Withdraw</option>				
			</InputSelect>
		</p>
		<p>
			Choose type
			<InputSelect @bind-Value="Model.TypeOfAsset" @oninput="UpdateSelectedType">
				<option class="option" value="">Choose...</option>
				<option class="option" value="Metal">Metal</option>
				<option class="option" value="Currency">Currency</option>
				<option class="option" value="CryptoCurrency">CryptoCurrency</option>
			</InputSelect>
		</p>
		<p>
			Choose Asset<InputSelect @bind-Value="Model.AssetCode">
				<option class="option" value="">Choose...</option>
				@if (Dict != null && Dict.Count > 0)
				{
					@foreach (var option in Dict)
					{
						<option class="option" value=@option.Key>@option.Value</option>
					}
				}
			</InputSelect>
		</p>
		
		@if (selectedType == "Metal")
		{
			<p>How many ounces do you want to @Model.TransactionType <InputNumber @bind-Value="Model.Ammount" /></p>
		}
		else
		{
			<p>How many units you want to  @Model.TransactionType<InputNumber @bind-Value="Model.Ammount" /></p>
		}
		
		<button type="submit">@Model.TransactionType</button>
	</EditForm>
	<p>@InfoMessage</p>
</div>

	@if(TransactionsList !=null && TransactionsList.Count > 0)
	{
	<div id="Transaction-container">
		<table class="TransactionTable">
			<tr>
				<td>Transaction Type</td>
				<td>Date</td>
				<td>Asset Code</td>
				<td>Ammont</td>
				<td>Transaction ID</td>
			</tr>
		@foreach(var Transaction in TransactionsList)
		{
			<tr>
					<td>@Transaction.TransactionType</td>
					<td>@Transaction.date</td>
					<td>@Transaction.AssetCode</td>
					<td>@Transaction.Ammount</td>
					<td>@Transaction.Id</td>
			</tr>
		}
		</table>
	</div>
	}

@code{
	private string ChoosedAssetType;
	private string InfoMessage;
	private UserModel LoggedUser;
	private Dictionary<string, string> MetalDict;
	private Dictionary<string, string> CurrencyDict;
	private Dictionary<string, string> CryptoCurrencyDict;
	private Dictionary<string, string> AllAssetsDict;
	public Dictionary<string, string> Dict;
	private string selectedType = string.Empty;
	public TransactionModel Model = new TransactionModel();
	private List<TransactionModel> TransactionsList;
	protected override async Task OnInitializedAsync()
	{
		LoggedUser = await _UserGetter.GetLoggedUser();
		Model.TransactionType = "Deposit";
		TransactionsList = await _TransactionGetter.GetUserTransactions(false);
		MetalDict = await _DictGetter.GetMetalDict();
		CurrencyDict = await _DictGetter.GetCurrencyDict();
		CryptoCurrencyDict = await _DictGetter.GetCryptoCurrencyDict();

		AllAssetsDict = CurrencyDict
			.Concat(MetalDict)
			.Concat(CryptoCurrencyDict)
			.ToDictionary(pair => pair.Key, pair => pair.Value);

		Dict = AllAssetsDict;
	}

	public async Task AddTransactionfunc()
	{

		if (!string.IsNullOrEmpty(Model.AssetCode) && !string.IsNullOrEmpty(Model.TransactionType) && Model.Ammount > 0)
		{
			var UserAssetAmmount = await _AssetGetter.GetAmmountOfAsset(Model.AssetCode, Model.TypeOfAsset,false);
			if (Model.TransactionType == "Withdraw" && Model.Ammount > UserAssetAmmount)
			{
				ChangeMessage($"You dont have {Model.Ammount} {Model.AssetCode}");
			}
			else
			{
				Model.UserId = LoggedUser.Id;
				Model.IsTrialTransaction = false;
				await _DbHelper.AddTransactionToDb(Model);

				ChangeMessage($"successfully {Model.TransactionType} {Dict[Model.AssetCode]} in number {Model.Ammount}");	
			}
		}	
		else
		{
			ChangeMessage("you have to insert data");
		}		
		TransactionsList = await _TransactionGetter.GetUserTransactions(false);
		Model = new TransactionModel { TransactionType = "Deposit" };
		StateHasChanged();
	}
	public async Task UpdateSelectedType(ChangeEventArgs Event)
	{
		
		selectedType = Event.Value?.ToString();
		if (selectedType == "Currency")
		{
			Dict = CurrencyDict;
		
		}
		else if (selectedType == "Metal")
		{
			Dict = MetalDict;
			
		}
		else if (selectedType == "CryptoCurrency")
		{
			Dict = CryptoCurrencyDict;
			
		}
		
		StateHasChanged();
	}
	public async Task ChangeMessage(string Message)
	{
		InfoMessage = Message;
		StateHasChanged();
		await Task.Delay(5000);
		InfoMessage = "";
		StateHasChanged();
	}
}