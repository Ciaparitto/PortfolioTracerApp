@page "/AddAsset"
@rendermode InteractiveServer
@attribute [Authorize]
@inject IApiService _ApiService;
@inject IDbService _DbService;
@inject IUserService _userService;
@inject HttpClient _httpClient;
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models;
@using PortfolioApp.Services.Interfaces
<EditForm Model="@model" OnValidSubmit="@AddAssetfunc">
	
	
	Wybierz rodzaj <InputSelect @bind-Value="model.TypeOfAsset" @oninput="UpdateSelectedType" >
		<option value="">Wybierz...</option>
		<option value="Metal">Metal</option>
		<option value="Currency">Currency</option>
		<option value="CryptoCurrency">CryptoCurrency</option>
	</InputSelect>
	<p></p>
	Co chcesz dodać<InputSelect @bind-Value="model.AssetCode">
		<option value="">Wybierz...</option>
		@if (Dict != null && Dict.Count > 0)
		{
			@foreach (var option in Dict)
			{
				<option value=@option.Key>@option.Value</option>
			}
		}
	</InputSelect>
	    <InputHidden Value="@model.UserId" />
		<InputHidden Value="@model.User" />\
		<InputHidden Value="@model.id" />
	
	@if (selectedType == "Metal")
	{
		<p>Ile uncji chcesz dodac </p> <InputNumber @bind-Value="model.Ammount" />
	}
	else
	{
		<p>Ile sztuk chcesz dodac </p> <InputNumber @bind-Value="model.Ammount" />
	}	
	<button type="submit">Dodaj</button>
	<p>@AddingMessage</p>
</EditForm>


@code {
	public Dictionary<string, string> MetalDict;
	public Dictionary<string, string> CurrencyDict;
	public Dictionary<string, string> CryptoCurrencyDict;
	public AssetModel model = new AssetModel();
	public string selectedType = string.Empty;
	public Dictionary<string, string> Dict;
	public string AddingMessage = "";



	protected override async Task OnInitializedAsync()
	{
		MetalDict = await _ApiService.GetMetalDict();

		CurrencyDict = await _ApiService.GetCurrencyDict();

		CryptoCurrencyDict = await _ApiService.GetCryptoCurrencyDict();
		

		Dictionary<string, string> AllAssetsDict = CurrencyDict
			.Concat(MetalDict)
			.Concat(CryptoCurrencyDict)
			.ToDictionary(pair => pair.Key, pair => pair.Value);
		Dict = AllAssetsDict;
	}

	private void UpdateSelectedType(ChangeEventArgs Event)
	{
		selectedType = Event.Value?.ToString();
		if (selectedType == "Currency")
		{
			Dict = CurrencyDict;
		}
		else if (selectedType == "Metal")
		{
			Dict = MetalDict;
		}
		else if (selectedType == "CryptoCurrency")
		{
			Dict = CryptoCurrencyDict;
		}
	}

	public async Task AddAssetfunc()
	{

		if(!string.IsNullOrEmpty(model.AssetCode) && !string.IsNullOrEmpty(model.TypeOfAsset) && model.Ammount !=0)
		{
			try
			{
				Console.WriteLine(model.AssetCode);
				Console.WriteLine(model.TypeOfAsset);
				Console.WriteLine(model.Ammount);
				var User = await _userService.GetLoggedUser();
				model.UserId = User.Id;
				Console.WriteLine("Przed dodaniem do bazy danych");
				await _DbService.AddAssetToDb(model);
				Console.WriteLine("po dodaniu");
				await ChangeMessage($"pomyslnie dodano {Dict[model.AssetCode]} w ilosci {model.Ammount}");
			}
			catch (Exception ex)
			{
				await ChangeMessage($"blad {ex}");

			}
		}else
		{
			await ChangeMessage("wprowadz dane");
		}

	}
	public async Task ChangeMessage(string Message)
	{
		AddingMessage = Message;
		StateHasChanged();
		await Task.Delay(5000);
		StateHasChanged();
		AddingMessage = "";
	}
	
}
