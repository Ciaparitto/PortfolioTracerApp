@page "/AddAsset"
@rendermode InteractiveServer
@attribute [Authorize]
@inject IDbService _DbService;
@inject IUserService _userService;
@using Microsoft.AspNetCore.Authorization
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models;
@using PortfolioApp.Services.Interfaces
<EditForm Model="@model" OnValidSubmit="@AddAssetfunc">
	
	
	Wybierz rodzaj <InputSelect @bind-Value="model.TypeOfAsset" @oninput="UpdateSelectedType" >
		<option value="">Wybierz...</option>
		<option value="Metal">Metal</option>
		<option value="Currency">Currency</option>
		<option value="CryptoCurrency">CryptoCurrency</option>
	</InputSelect>
	<p></p>
	Co chcesz dodać<InputSelect @bind-Value="model.AssetCode">
		<option value="">Wybierz...</option>
		@foreach (var option in Dict)
		{
			<option value=@option.Key>@option.Value</option>
		}
	</InputSelect>
	    <InputHidden Value="@model.UserId" />
		<InputHidden Value="@model.User" />\
		<InputHidden Value="@model.id" />
	
	@if (selectedType == "Metal")
	{
		<p>Ile uncji chcesz dodac </p> <InputNumber @bind-Value="model.Ammount" />
	}
	else
	{
		<p>Ile sztuk chcesz dodac </p> <InputNumber @bind-Value="model.Ammount" />
	}	
	<button type="submit">Dodaj</button>
	<p>@AddingMessage</p>
</EditForm>


@code {
	public Dictionary<string, string> CurrenciesDict = new Dictionary<string, string>
	{
	{"USD", "United States Dollar"},
	{"EUR", "Euro"},
	{"GBP", "British Pound Sterling"},
	{"JPY", "Japanese Yen"},
	{"AUD", "Australian Dollar"},
	{"CAD", "Canadian Dollar"},
	{"CHF", "Swiss Franc"},
	{"CNY", "Chinese Yuan"},
	{"SEK", "Swedish Krona"},
	{"NZD", "New Zealand Dollar"},
	{"NOK", "Norwegian Krone"},
	{"DKK", "Danish Krone"},
	{"SGD", "Singapore Dollar"},
	{"HKD", "Hong Kong Dollar"},
	{"KRW", "South Korean Won"},
	{"TRY", "Turkish Lira"},
	{"ZAR", "South African Rand"},
	{"SAR", "Saudi Riyal"},
	{"AED", "United Arab Emirates Dirham"},
	{"QAR", "Qatari Riyal"},
	{"MYR", "Malaysian Ringgit"},
	{"THB", "Thai Baht"},
	{"IDR", "Indonesian Rupiah"},
	{"INR", "Indian Rupee"},
	{"PHP", "Philippine Peso"},
	{"PKR", "Pakistani Rupee"},
	{"KWD", "Kuwaiti Dinar"},
	{"BHD", "Bahraini Dinar"},
	{"OMR", "Omani Rial"},
	{"JOD", "Jordanian Dinar"},
	{"PLN","Polish Zloty"}
};

	public Dictionary<string, string> MetalsDict = new Dictionary<string, string>
	{
			{ "XAU", "Gold" },
			{ "XAG", "Silver" },
			{ "XPT", "Platinum" },
			{ "XPD", "Palladium" },
	};

	public Dictionary<string, string> CryptoDict = new Dictionary<string, string>
			{
			{ "BTC", "Bitcoin" },
			{ "ETH", "Ethereum" },
			{ "XRP", "Ripple" },
			{ "LTC", "Litecoin" },
			{ "BCH", "Bitcoin Cash" },
			{ "ADA", "Cardano" },
			{ "DOT", "Polkadot" },
			{ "XLM", "Stellar" },
			{ "DOGE", "Dogecoin" },
			{ "USDT", "Tether" },
			{ "XMR", "Monero" },
			{ "EOS", "EOS.IO" },
			{ "TRX", "TRON" },
			{ "XTZ", "Tezos" },
			{ "DASH", "Dash" },
			{ "ATOM", "Cosmos" },
			{ "LINK", "Chainlink" },
			{ "UNI", "Uniswap" },
			{ "AAVE", "Aave" },
			{ "SNX", "Synthetix" },
			};
	public AssetModel model = new AssetModel();
	public string selectedType = string.Empty;
	public Dictionary<string, string> Dict;
	public string AddingMessage = "";



	protected override async Task OnInitializedAsync()
	{
		Dictionary<string, string> AllAssetsDict = MetalsDict
			.Concat(CurrenciesDict)
			.Concat(CryptoDict)
			.ToDictionary(pair => pair.Key, pair => pair.Value);
		Dict = AllAssetsDict;
	}

	private void UpdateSelectedType(ChangeEventArgs Event)
	{
		selectedType = Event.Value?.ToString();
		if (selectedType == "Currency")
		{
			Dict = CurrenciesDict;
		}
		else if (selectedType == "Metal")
		{
			Dict = MetalsDict;
		}
		else if (selectedType == "CryptoCurrency")
		{
			Dict = CryptoDict;
		}
	}

	public async Task AddAssetfunc()
	{

		if(!string.IsNullOrEmpty(model.AssetCode) && !string.IsNullOrEmpty(model.TypeOfAsset) && model.Ammount !=0)
		{
			try
			{
				Console.WriteLine(model.AssetCode);
				Console.WriteLine(model.TypeOfAsset);
				Console.WriteLine(model.Ammount);
				var User = await _userService.GetLoggedUser();
				model.UserId = User.Id;
				Console.WriteLine("Przed dodaniem do bazy danych");
				await _DbService.AddAssetToDb(model);
				Console.WriteLine("po dodaniu");
				await ChangeMessage($"pomyslnie dodano {Dict[model.AssetCode]} w ilosci {model.Ammount}");
			}
			catch (Exception ex)
			{
				await ChangeMessage($"blad {ex}");

			}
		}else
		{
			await ChangeMessage("wprowadz dane");
		}

	}
	public async Task ChangeMessage(string Message)
	{
		AddingMessage = Message;
		StateHasChanged();
		await Task.Delay(5000);
		StateHasChanged();
		AddingMessage = "";
	}
	
}
