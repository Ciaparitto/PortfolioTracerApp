@page "/AddAsset"
@rendermode InteractiveServer
@attribute [Authorize]
@inject IDbService _DbService;
@inject IUserService _userService;
@inject HttpClient _httpClient;

@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models;
@using PortfolioApp.Services.Interfaces

<PageTitle>Adding Asset</PageTitle>
<HeadContent>
	<link href="/css/AddHomeStyle.css" rel="stylesheet" />
</HeadContent>
<div id="form">

<EditForm Model="@model" OnSubmit="@AddAssetfunc">
	
	
	<p>Choose type
		<InputSelect @bind-Value="model.TypeOfAsset" @oninput="UpdateSelectedType">
				<option class="option" value="">Choose...</option>
				<option class="option" value="Metal">Metal</option>
				<option class="option" value="Currency">Currency</option>
				<option class="option" value="CryptoCurrency">CryptoCurrency</option>
		</InputSelect>
	</p>

	<p>What you want to add<InputSelect @bind-Value="model.AssetCode">
			<option class="option" value="">Choose...</option>
	@if (Dict != null && Dict.Count > 0)
	{
		@foreach (var option in Dict)
		{
					<option class="option" value=@option.Key>@option.Value</option>
		}
	}
		</InputSelect>
	</p>
	  
	
	@if (selectedType == "Metal")
	{
		<p>How many ounces do you want to add <InputNumber @bind-Value="model.Ammount" /></p>
	}
	else
	{
		<p>How many units you want to add <InputNumber @bind-Value="model.Ammount" /></p>
	}	

	<button type="submit">Add</button>
		

</EditForm>
<p id="AddMessage">@AddingMessage</p>
</div>


@code {
	public Dictionary<string, string> MetalDict;
	public Dictionary<string, string> CurrencyDict;
	public Dictionary<string, string> CryptoCurrencyDict;
	public AssetModel model = new AssetModel();
	public string selectedType = string.Empty;
	public Dictionary<string, string> Dict;
	public string AddingMessage = "";
	private Dictionary<string, string> AllAssetsDict;



	protected override async Task OnInitializedAsync()
	{
		MetalDict = await _DbService.GetMetalDict();

		CurrencyDict = await _DbService.GetCurrencyDict();

		CryptoCurrencyDict = await _DbService.GetCryptoCurrencyDict();


		AllAssetsDict = CurrencyDict
			.Concat(MetalDict)
			.Concat(CryptoCurrencyDict)
			.ToDictionary(pair => pair.Key, pair => pair.Value);
		Dict = AllAssetsDict;
		
	}

	public async Task UpdateSelectedType(ChangeEventArgs Event)
	{
		
		selectedType = Event.Value?.ToString();
		if (selectedType == "Currency")
		{
			Dict = CurrencyDict;
		
		}
		else if (selectedType == "Metal")
		{
			Dict = MetalDict;
			
		}
		else if (selectedType == "CryptoCurrency")
		{
			Dict = CryptoCurrencyDict;
			
		}
		
		StateHasChanged();
	}

	public async Task AddAssetfunc()
	{

		if(!string.IsNullOrEmpty(model.AssetCode) && !string.IsNullOrEmpty(model.TypeOfAsset) && model.Ammount !=0)
		{
			try
			{
			
				var User = await _userService.GetLoggedUser();
				model.UserId = User.Id;
				await _DbService.AddAssetToDb(model);
				await ChangeMessage($"successfully added {Dict[model.AssetCode]} in number {model.Ammount}");
			}
			catch (Exception ex)
			{
				await ChangeMessage($"error {ex}");

			}
		}else
		{
			await ChangeMessage("you have to insert data");
		}

	}
	public async Task ChangeMessage(string Message)
	{
		AddingMessage = Message;
		StateHasChanged();
		await Task.Delay(5000);
		StateHasChanged();
		AddingMessage = "";
	}
	
}
