@page "/Account"
@using Microsoft.Build.Framework
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models
@inject IUserService _UserService;
@inject IJSRuntime JSRuntime
<PageTitle>Your Account</PageTitle>
<HeadContent>
    <link href="/css/AddHomeStyle.css" rel="stylesheet" />
</HeadContent>
<div id="UserData-Container">
    @if(USER != null)
    {
        <h1 class="UserData" id="UserName">Your account name: <strong>@USER.UserName</strong></h1>
    }
    
    <br />
    <h2><strong>Change Password</strong></h2>
    <br />
  

     <EditForm Model="@model" OnValidSubmit="ChangePasswordFunc">
      
        <ValidationSummary />
        <p>Current Password  <InputText type="password" @bind-Value="model.CurrentPassword" /></p>       
        <br />           
        <p>New Password <InputText type="password" @bind-Value="model.CurrentPassword" /></p>
        <br />
        <button id="ChangePassword-button" type="submit">Change Password</button>
    
    </EditForm>
    
    <form action="/Account/Logout" method="post">
        <button id="LogOut-buttton" type="submit">LogOut</button>
    </form>
   
</div>

@code {
    private UserModel USER;
    public ChangePassword model = new ChangePassword();
    private string Message;

    protected override async Task OnInitializedAsync()
    {
        USER = await _UserService.GetLoggedUser();
    }

    private async Task ChangePasswordFunc()
    {
        if (!String.IsNullOrWhiteSpace(model.CurrentPassword) && !String.IsNullOrWhiteSpace(model.NewPassword))
        {
            var PasswordIsOk = await _UserService.CheckPassword(model.CurrentPassword);
            if (PasswordIsOk)
            {
                await _UserService.ChangePassword(model.CurrentPassword, model.NewPassword);
                RefreshPage();
            }

        }
        await ChangeMessage("Wrong Password");

    }
    public async Task ChangeMessage(string message)
    {
        Message = message;
        StateHasChanged();
        await Task.Delay(5000);
        StateHasChanged();
        Message = "";
    }
    public void nwmlol()
    {
        Console.WriteLine("Wywołanie funkcji nwmlol");
    }
    public async Task LogoutFunc()
    {
        Console.WriteLine("Wywołanie funkcji LogoutFunc");
    }
    private async Task RefreshPage()
    {
        await JSRuntime.InvokeVoidAsync("window.location.reload");
    }

    public class ChangePassword
    {
        [Required]
        public string CurrentPassword { get; set; }

        [Required]
        public string NewPassword { get; set; }
    }

  
}

