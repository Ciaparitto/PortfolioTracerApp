@page "/TrialAccount"
@using PortfolioApp.Components.Services.Interfaces
@using PortfolioApp.Models
@using PortfolioApp.Services.Interfaces
@rendermode InteractiveServer
@inject IDictGetter _DictGetter;
@inject IDbHelper _DbHelper;
@inject IUserService _UserService;
@inject IAssetGetter _AssetGetter
@inject IUserGetter _UserGetter;
@inject AppDbContext _Context;
@inject ITransactionGetter _TransactionGetter;
<PageTitle>Your Transactions History</PageTitle>
<HeadContent>
	<link href="/css/TrialAccountStyle.css" rel="stylesheet" />
</HeadContent>
<div id="AddingTransaction">
	@if (LoggedUser != null)
	{
		<strong>You have @Math.Round(LoggedUser.Money, 2) $</strong>
	}
	<EditForm Model="@TransactionModel" OnSubmit="@AddTransactionfunc">
		<p>
			What do you want
			<InputSelect @bind-Value="TransactionModel.TransactionType">
				<option class="option" value="Deposit">Deposit</option>
				<option class="option" value="Withdraw">Withdraw</option>
			</InputSelect>
		</p>
		<p>
			Choose type
			<InputSelect @bind-Value="TransactionModel.TypeOfAsset" @oninput="UpdateSelectedTypeTransactions">
				<option class="option" value="">Choose...</option>
				<option class="option" value="Metal">Metal</option>
				<option class="option" value="Currency">Currency</option>
				<option class="option" value="CryptoCurrency">CryptoCurrency</option>
			</InputSelect>
		</p>
		<p>
			Choose Asset<InputSelect @bind-Value="TransactionModel.AssetCode">
				<option class="option" value="">Choose...</option>
				@if (DictTransactions != null && DictTransactions.Count > 0)
				{
					@foreach (var option in DictTransactions)
					{
						<option class="option" value=@option.Key>@option.Value</option>
					}
				}
			</InputSelect>
		</p>

		@if (SelectedTypeTransaction == "Metal")
		{
			<p>How many ounces do you want to @TransactionModel.TransactionType <InputNumber @bind-Value="TransactionModel.Ammount" /></p>
		}
		else
		{
			<p>How many units you want to  @TransactionModel.TransactionType<InputNumber @bind-Value="TransactionModel.Ammount" /></p>
		}

		<button type="submit">@TransactionModel.TransactionType</button>
	</EditForm>
	<p>@InfoMessage</p>
</div>
<div id="UserAssets">
	<div id="AssetSelect">
		<p>
			Choose type <InputSelect @bind-Value="AssetModel.TypeOfAsset" @oninput="UpdateSelectedTypeAssets">
				<option class="option" value="All">All</option>
				<option class="option" value="Metal">Metal</option>
				<option class="option" value="Currency">Currency</option>
				<option class="option" value="CryptoCurrency">CryptoCurrency</option>
			</InputSelect>
		</p>
	</div>

	<div id="Assets-Container">

		@if (UserAssetList != null)
		{
			foreach (var asset in UserAssetList)
			{
				<p class="Asset">@($"You own {asset.Value} units of {asset.Key}")</p>
			}
		}
	</div>
</div>
@if (TransactionsList != null && TransactionsList.Count > 0)
{
	<div id="Transaction-container">
		<table class="TransactionTable">
			<tr>
				<td>Transaction Type</td>
				<td>Date</td>
				<td>Asset Code</td>
				<td>Ammont</td>
				<td>Transaction ID</td>
			</tr>
			@foreach (var Transaction in TransactionsList)
			{
				<tr>
					<td>@Transaction.TransactionType</td>
					<td>@Transaction.date</td>
					<td>@Transaction.AssetCode</td>
					<td>@Transaction.Ammount</td>
					<td>@Transaction.Id</td>
				</tr>
			}
		</table>
	</div>
}

@code {
	private string ChoosedAssetType;
	private string InfoMessage;
	private UserModel LoggedUser;
	private Dictionary<string, string> MetalDict;
	private Dictionary<string, string> CurrencyDict;
	private Dictionary<string, string> CryptoCurrencyDict;
	private Dictionary<string, string> AllAssetsDict;
	private Dictionary<string, string> DictTransactions;
	private Dictionary<string, string> DictAssets;
	private string SelectedTypeTransaction = string.Empty;
	private string SelectedTypeAsset = string.Empty;
	private TransactionModel TransactionModel = new TransactionModel();
	private AssetModel AssetModel = new AssetModel();
	private List<TransactionModel> TransactionsList;
	private Dictionary<string, double> UserAssetList;
	protected override async Task OnInitializedAsync()
	{
		LoggedUser = await _UserGetter.GetLoggedUser();
		TransactionModel.TransactionType = "Deposit";

		UserAssetList = await _AssetGetter.GetUserAssets(true);
		TransactionsList = await _TransactionGetter.GetUserTransactions(true);
		MetalDict = await _DictGetter.GetMetalDict();

		CurrencyDict = await _DictGetter.GetCurrencyDict();

		CryptoCurrencyDict = await _DictGetter.GetCryptoCurrencyDict();

		AllAssetsDict = CurrencyDict
			.Concat(MetalDict)
			.Concat(CryptoCurrencyDict)
			.ToDictionary(pair => pair.Key, pair => pair.Value);

		DictTransactions = AllAssetsDict;
		DictAssets = AllAssetsDict;
	}

	public async Task AddTransactionfunc()
	{

		if (!string.IsNullOrEmpty(TransactionModel.AssetCode) && !string.IsNullOrEmpty(TransactionModel.TransactionType) && TransactionModel.Ammount > 0)
		{
			var TransactionValue = await _AssetGetter.GetAssetValue(TransactionModel.AssetCode, TransactionModel.Ammount, LoggedUser);

			TransactionModel.UserId = LoggedUser.Id;
			TransactionModel.IsTrialTransaction = true;
			if (TransactionModel.TransactionType == "Withdraw")
			{
				var UserAssetAmmount = await _AssetGetter.GetAmmountOfAsset(TransactionModel.AssetCode, TransactionModel.TypeOfAsset, true);
				if (TransactionModel.TransactionType == "Withdraw" && TransactionModel.Ammount > UserAssetAmmount)
				{
					ChangeMessage($"You dont have {TransactionModel.Ammount} {TransactionModel.AssetCode}");
				}
				else
				{
					LoggedUser.Money += TransactionValue;
					await _DbHelper.AddTransactionToDb(TransactionModel);

					ChangeMessage($"successfully {TransactionModel.TransactionType} {DictTransactions[TransactionModel.AssetCode]} in number {TransactionModel.Ammount}");
				}
			}
			if (TransactionModel.TransactionType == "Deposit" && LoggedUser.Money >= TransactionValue)
			{
				LoggedUser.Money -= TransactionValue;
				await _DbHelper.AddTransactionToDb(TransactionModel);

				ChangeMessage($"successfully {TransactionModel.TransactionType} {DictTransactions[TransactionModel.AssetCode]} in number {TransactionModel.Ammount}");	
			}
			else
			{
				if (TransactionModel.TransactionType == "Deposit" && LoggedUser.Money <= TransactionValue)
				{
					ChangeMessage($"You dont have enough money to buy {TransactionModel.Ammount} {DictTransactions[TransactionModel.AssetCode]}");
				}			
			}
		}
		else
		{
			ChangeMessage("you have to insert data");
		}
		TransactionsList = await _TransactionGetter.GetUserTransactions(true);
		TransactionModel = new TransactionModel { TransactionType = "Deposit" };
		StateHasChanged();
	}
	public void UpdateSelectedTypeTransactions(ChangeEventArgs Event)
	{
		SelectedTypeTransaction = Event.Value?.ToString();

		if (SelectedTypeTransaction == "Currency")
		{
			DictTransactions = CurrencyDict;
		}
		else if (SelectedTypeTransaction == "Metal")
		{
			DictTransactions = MetalDict;
		}
		else if (SelectedTypeTransaction == "CryptoCurrency")
		{
			DictTransactions = CryptoCurrencyDict;
		}
		StateHasChanged();
	}
	private async Task UpdateSelectedTypeAssets(ChangeEventArgs Event)
	{
		SelectedTypeAsset = Event.Value?.ToString();
		if (SelectedTypeAsset == "Currency")
		{
			UserAssetList = await _AssetGetter.GetUserAssetsByType("Currency",true);
		}
		else if (SelectedTypeAsset == "Metal")
		{
			UserAssetList = await _AssetGetter.GetUserAssetsByType("Metal", true);
		}
		else if (SelectedTypeAsset == "CryptoCurrency")
		{
			UserAssetList = await _AssetGetter.GetUserAssetsByType("CryptoCurrency", true);
		}
		else if (SelectedTypeAsset == "All")
		{
			UserAssetList = await _AssetGetter.GetUserAssets(true);
		}
		StateHasChanged();
	}
	public async Task ChangeMessage(string Message)
	{
		InfoMessage = Message;
		StateHasChanged();
		await Task.Delay(5000);
		InfoMessage = "";
		StateHasChanged();
	}

}
